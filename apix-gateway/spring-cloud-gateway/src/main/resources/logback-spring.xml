<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration debug="false" scan="true" scanPeriod="30 second">
  <!--<contextName>${appName}</contextName>-->
  <!-- logback.xml加载早于application.yml,使用spring提供的标签来对此参数进行配置-->
  <springProperty scope="context" name="logDir" source="sinosdx.logging.dir" defaultValue="/data/sinosdx/logs/"/>
  <springProperty scope="context" name="logstashServerAddr" source="logstash.server.addr" defaultValue="49.234.211.224:4560"/>
  <!-- 不能删除，用于ELK区分不同服务日志-->
  <springProperty scope="context" name="appName" source="spring.application.name" defaultValue="unknown_app"/>
  <springProperty scope="context" name="spring.application.name" source="spring.application.name" defaultValue="unknown_app"/>
  <springProperty scope="context" name="active" source="spring.profiles.active" defaultValue="dev" />
  <springProperty scope="context" name="rootLevel" source="sinosdx.logging.root.level" defaultValue="INFO"/>
  <!-- 彩色日志依赖的渲染类 -->
  <conversionRule converterClass="org.springframework.boot.logging.logback.ColorConverter"
    conversionWord="clr"/>
  <conversionRule
    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"
    conversionWord="wex"/>
  <conversionRule
    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"
    conversionWord="wEx"/>

  <!-- 日志目录 -->
  <property name="FILESIZE" value="1024MB"/>
  <property name="MAXHISTORY" value="15"/>
  <property name="CHARSET" value="UTF-8"/>
  <timestamp key="DATETIME" datePattern="yyyy-MM-dd HH:mm:ss"/>
  <!-- 彩色日志格式 -->
  <property name="CONSOLE_LOG_PATTERN"
    value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint}%clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(-){faint} %clr([%16.16t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
  <property name="LOG_PATTERN"
    value="[%-5level] %d{${DATETIME}} [%thread] [%X{requestId}] %logger{36} - %m%n"/>

  <!-- 控制台打印 -->
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>DEBUG</level>
    </filter>
    <encoder>
      <pattern>${CONSOLE_LOG_PATTERN}</pattern>
      <charset>${CHARSET}</charset>
    </encoder>
  </appender>
  <!-- ERROR 输入到文件，按日期和文件大小 -->
  <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <encoder>
      <pattern>${LOG_PATTERN}</pattern>
      <charset>${CHARSET}</charset>
    </encoder>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDir}/${appName}/%d/error.%i.log</fileNamePattern>
      <maxHistory>${MAXHISTORY}</maxHistory>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${FILESIZE}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>
  </appender>

  <!-- WARN 输入到文件，按日期和文件大小 -->
  <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <encoder>
      <pattern>${LOG_PATTERN}</pattern>
      <charset>${CHARSET}</charset>
    </encoder>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>WARN</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDir}/${appName}/%d/warn.%i.log</fileNamePattern>
      <maxHistory>${MAXHISTORY}</maxHistory>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${FILESIZE}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>
  </appender>

  <!-- INFO 输入到文件，按日期和文件大小 -->
  <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <encoder>
      <pattern>${LOG_PATTERN}</pattern>
      <charset>${CHARSET}</charset>
    </encoder>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDir}/${appName}/%d/info.%i.log</fileNamePattern>
      <maxHistory>${MAXHISTORY}</maxHistory>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${FILESIZE}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>
  </appender>
  <!-- DEBUG 输入到文件，按日期和文件大小 -->
  <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <encoder>
      <pattern>${LOG_PATTERN}</pattern>
      <charset>${CHARSET}</charset>
    </encoder>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>DEBUG</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDir}/${appName}/%d/debug.%i.log</fileNamePattern>
      <maxHistory>${MAXHISTORY}</maxHistory>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${FILESIZE}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>
  </appender>
  <!-- TRACE 输入到文件，按日期和文件大小 -->
  <appender name="TRACE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <encoder>
      <pattern>${LOG_PATTERN}</pattern>
      <charset>${CHARSET}</charset>
    </encoder>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>TRACE</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDir}/${appName}/%d/trace.%i.log</fileNamePattern>
      <maxHistory>${MAXHISTORY}</maxHistory>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${FILESIZE}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>
  </appender>

  <appender name="DEBUG_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
    <discardingThreshold>0</discardingThreshold>
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
    <queueSize>2048</queueSize>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="DEBUG"/>
  </appender>
  <appender name="ERROR_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
    <discardingThreshold>0</discardingThreshold>
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
    <queueSize>2048</queueSize>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="ERROR"/>
  </appender>
  <appender name="WARN_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
    <discardingThreshold>0</discardingThreshold>
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
    <queueSize>2048</queueSize>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="WARN"/>
  </appender>
  <appender name="INFO_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
    <discardingThreshold>0</discardingThreshold>
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
    <queueSize>2048</queueSize>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="INFO"/>
  </appender>
  <appender name="TRACE_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
    <discardingThreshold>0</discardingThreshold>
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
    <queueSize>2048</queueSize>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="TRACE"/>
  </appender>

　<root level="DEBUG">
　　　<appender-ref ref="STDOUT" />
　</root>
  <springProfile name="dev">
    <logger name="java.sql.Connection" level="debug"/>
    <logger name="java.sql.Statement" level="debug"/>
    <logger name="java.sql.PreparedStatement" level="debug"/>
    <root level="${rootLevel}">
      <appender-ref ref="STDOUT"/>
    </root>
  </springProfile>
  <springProfile name="test">
    <logger name="java.sql.Connection" level="debug"/>
    <logger name="java.sql.Statement" level="debug"/>
    <logger name="java.sql.PreparedStatement" level="debug"/>
    <root level="${rootLevel}">
      <appender-ref ref="DEBUG_ASYNC"/>
      <appender-ref ref="ERROR_ASYNC"/>
      <appender-ref ref="WARN_ASYNC"/>
      <appender-ref ref="INFO_ASYNC"/>
      <appender-ref ref="TRACE_ASYNC"/>
    </root>
  </springProfile>
  <springProfile name="uat">
    <root level="${rootLevel}">
      <appender-ref ref="DEBUG_ASYNC"/>
      <appender-ref ref="ERROR_ASYNC"/>
      <appender-ref ref="WARN_ASYNC"/>
      <appender-ref ref="INFO_ASYNC"/>
      <appender-ref ref="TRACE_ASYNC"/>
    </root>
  </springProfile>
  <springProfile name="release">
    <root level="${rootLevel}">
      <appender-ref ref="ERROR_ASYNC"/>
      <appender-ref ref="WARN_ASYNC"/>
      <appender-ref ref="INFO_ASYNC"/>
      <appender-ref ref="TRACE_ASYNC"/>
    </root>
  </springProfile>
  <springProfile name="pro">
    <root level="${rootLevel}">
      <appender-ref ref="ERROR_ASYNC"/>
      <appender-ref ref="WARN_ASYNC"/>
      <appender-ref ref="INFO_ASYNC"/>
      <appender-ref ref="TRACE_ASYNC"/>
    </root>
  </springProfile>
</configuration>
